/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BulkRoleAssignmentReport } from '../types';
// @ts-ignore
import { BulkRoleUnAssignmentReport } from '../types';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { RoleAssignmentCreate } from '../types';
// @ts-ignore
import { RoleAssignmentRead } from '../types';
// @ts-ignore
import { RoleAssignmentRemove } from '../types';
/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
export const RoleAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleAssignmentCreate} roleAssignmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRole: async (
      projId: string,
      envId: string,
      roleAssignmentCreate: RoleAssignmentCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('assignRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('assignRole', 'envId', envId);
      // verify required parameter 'roleAssignmentCreate' is not null or undefined
      assertParamExists('assignRole', 'roleAssignmentCreate', roleAssignmentCreate);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleAssignmentCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Bulk Assign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkAssignRole: async (
      projId: string,
      envId: string,
      roleAssignmentCreate: Array<RoleAssignmentCreate>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkAssignRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkAssignRole', 'envId', envId);
      // verify required parameter 'roleAssignmentCreate' is not null or undefined
      assertParamExists('bulkAssignRole', 'roleAssignmentCreate', roleAssignmentCreate);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleAssignmentCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Bulk Unassign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUnassignRole: async (
      projId: string,
      envId: string,
      roleAssignmentRemove: Array<RoleAssignmentRemove>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkUnassignRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkUnassignRole', 'envId', envId);
      // verify required parameter 'roleAssignmentRemove' is not null or undefined
      assertParamExists('bulkUnassignRole', 'roleAssignmentRemove', roleAssignmentRemove);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleAssignmentRemove,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
     * @summary List Role Assignments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [user] optional user filter, will only return role assignments granted to this user.
     * @param {string} [role] optional role filter, will only return role assignments granting this role.
     * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
     * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleAssignments: async (
      projId: string,
      envId: string,
      user?: string,
      role?: string,
      tenant?: string,
      resourceInstance?: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listRoleAssignments', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listRoleAssignments', 'envId', envId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (user !== undefined) {
        localVarQueryParameter['user'] = user;
      }

      if (role !== undefined) {
        localVarQueryParameter['role'] = role;
      }

      if (tenant !== undefined) {
        localVarQueryParameter['tenant'] = tenant;
      }

      if (resourceInstance !== undefined) {
        localVarQueryParameter['resource_instance'] = resourceInstance;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleAssignmentRemove} roleAssignmentRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignRole: async (
      projId: string,
      envId: string,
      roleAssignmentRemove: RoleAssignmentRemove,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('unassignRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('unassignRole', 'envId', envId);
      // verify required parameter 'roleAssignmentRemove' is not null or undefined
      assertParamExists('unassignRole', 'roleAssignmentRemove', roleAssignmentRemove);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleAssignmentRemove,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
export const RoleAssignmentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoleAssignmentsApiAxiosParamCreator(configuration);
  return {
    /**
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleAssignmentCreate} roleAssignmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async assignRole(
      projId: string,
      envId: string,
      roleAssignmentCreate: RoleAssignmentCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.assignRole(
        projId,
        envId,
        roleAssignmentCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Assign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkAssignRole(
      projId: string,
      envId: string,
      roleAssignmentCreate: Array<RoleAssignmentCreate>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkRoleAssignmentReport>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAssignRole(
        projId,
        envId,
        roleAssignmentCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Unassign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkUnassignRole(
      projId: string,
      envId: string,
      roleAssignmentRemove: Array<RoleAssignmentRemove>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkRoleUnAssignmentReport>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUnassignRole(
        projId,
        envId,
        roleAssignmentRemove,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
     * @summary List Role Assignments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [user] optional user filter, will only return role assignments granted to this user.
     * @param {string} [role] optional role filter, will only return role assignments granting this role.
     * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
     * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listRoleAssignments(
      projId: string,
      envId: string,
      user?: string,
      role?: string,
      tenant?: string,
      resourceInstance?: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleAssignmentRead>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listRoleAssignments(
        projId,
        envId,
        user,
        role,
        tenant,
        resourceInstance,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleAssignmentRemove} roleAssignmentRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unassignRole(
      projId: string,
      envId: string,
      roleAssignmentRemove: RoleAssignmentRemove,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRole(
        projId,
        envId,
        roleAssignmentRemove,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
export const RoleAssignmentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RoleAssignmentsApiFp(configuration);
  return {
    /**
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleAssignmentCreate} roleAssignmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRole(
      projId: string,
      envId: string,
      roleAssignmentCreate: RoleAssignmentCreate,
      options?: any,
    ): AxiosPromise<RoleAssignmentRead> {
      return localVarFp
        .assignRole(projId, envId, roleAssignmentCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Assign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkAssignRole(
      projId: string,
      envId: string,
      roleAssignmentCreate: Array<RoleAssignmentCreate>,
      options?: any,
    ): AxiosPromise<BulkRoleAssignmentReport> {
      return localVarFp
        .bulkAssignRole(projId, envId, roleAssignmentCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Unassign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUnassignRole(
      projId: string,
      envId: string,
      roleAssignmentRemove: Array<RoleAssignmentRemove>,
      options?: any,
    ): AxiosPromise<BulkRoleUnAssignmentReport> {
      return localVarFp
        .bulkUnassignRole(projId, envId, roleAssignmentRemove, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
     * @summary List Role Assignments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [user] optional user filter, will only return role assignments granted to this user.
     * @param {string} [role] optional role filter, will only return role assignments granting this role.
     * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
     * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleAssignments(
      projId: string,
      envId: string,
      user?: string,
      role?: string,
      tenant?: string,
      resourceInstance?: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<RoleAssignmentRead>> {
      return localVarFp
        .listRoleAssignments(
          projId,
          envId,
          user,
          role,
          tenant,
          resourceInstance,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleAssignmentRemove} roleAssignmentRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignRole(
      projId: string,
      envId: string,
      roleAssignmentRemove: RoleAssignmentRemove,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .unassignRole(projId, envId, roleAssignmentRemove, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for assignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiAssignRoleRequest
 */
export interface RoleAssignmentsApiAssignRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiAssignRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiAssignRole
   */
  readonly envId: string;

  /**
   *
   * @type {RoleAssignmentCreate}
   * @memberof RoleAssignmentsApiAssignRole
   */
  readonly roleAssignmentCreate: RoleAssignmentCreate;
}

/**
 * Request parameters for bulkAssignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiBulkAssignRoleRequest
 */
export interface RoleAssignmentsApiBulkAssignRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiBulkAssignRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiBulkAssignRole
   */
  readonly envId: string;

  /**
   *
   * @type {Array<RoleAssignmentCreate>}
   * @memberof RoleAssignmentsApiBulkAssignRole
   */
  readonly roleAssignmentCreate: Array<RoleAssignmentCreate>;
}

/**
 * Request parameters for bulkUnassignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiBulkUnassignRoleRequest
 */
export interface RoleAssignmentsApiBulkUnassignRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiBulkUnassignRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiBulkUnassignRole
   */
  readonly envId: string;

  /**
   *
   * @type {Array<RoleAssignmentRemove>}
   * @memberof RoleAssignmentsApiBulkUnassignRole
   */
  readonly roleAssignmentRemove: Array<RoleAssignmentRemove>;
}

/**
 * Request parameters for listRoleAssignments operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiListRoleAssignmentsRequest
 */
export interface RoleAssignmentsApiListRoleAssignmentsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly envId: string;

  /**
   * optional user filter, will only return role assignments granted to this user.
   * @type {string}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly user?: string;

  /**
   * optional role filter, will only return role assignments granting this role.
   * @type {string}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly role?: string;

  /**
   * optional tenant filter, will only return role assignments granted in that tenant.
   * @type {string}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly tenant?: string;

  /**
   * optional resource instance filter, will only return role assignments granted on that resource instance.
   * @type {string}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly resourceInstance?: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof RoleAssignmentsApiListRoleAssignments
   */
  readonly perPage?: number;
}

/**
 * Request parameters for unassignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiUnassignRoleRequest
 */
export interface RoleAssignmentsApiUnassignRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiUnassignRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RoleAssignmentsApiUnassignRole
   */
  readonly envId: string;

  /**
   *
   * @type {RoleAssignmentRemove}
   * @memberof RoleAssignmentsApiUnassignRole
   */
  readonly roleAssignmentRemove: RoleAssignmentRemove;
}

/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
export class RoleAssignmentsApi extends BaseAPI {
  /**
   * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
   * @summary Assign Role
   * @param {RoleAssignmentsApiAssignRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleAssignmentsApi
   */
  public assignRole(
    requestParameters: RoleAssignmentsApiAssignRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleAssignmentsApiFp(this.configuration)
      .assignRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleAssignmentCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Bulk Assign Role
   * @param {RoleAssignmentsApiBulkAssignRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleAssignmentsApi
   */
  public bulkAssignRole(
    requestParameters: RoleAssignmentsApiBulkAssignRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleAssignmentsApiFp(this.configuration)
      .bulkAssignRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleAssignmentCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Bulk Unassign Role
   * @param {RoleAssignmentsApiBulkUnassignRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleAssignmentsApi
   */
  public bulkUnassignRole(
    requestParameters: RoleAssignmentsApiBulkUnassignRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleAssignmentsApiFp(this.configuration)
      .bulkUnassignRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleAssignmentRemove,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
   * @summary List Role Assignments
   * @param {RoleAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleAssignmentsApi
   */
  public listRoleAssignments(
    requestParameters: RoleAssignmentsApiListRoleAssignmentsRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleAssignmentsApiFp(this.configuration)
      .listRoleAssignments(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.user,
        requestParameters.role,
        requestParameters.tenant,
        requestParameters.resourceInstance,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
   * @summary Unassign Role
   * @param {RoleAssignmentsApiUnassignRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleAssignmentsApi
   */
  public unassignRole(
    requestParameters: RoleAssignmentsApiUnassignRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RoleAssignmentsApiFp(this.configuration)
      .unassignRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleAssignmentRemove,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
