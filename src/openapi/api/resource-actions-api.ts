/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { ResourceActionCreate } from '../types';
// @ts-ignore
import { ResourceActionRead } from '../types';
// @ts-ignore
import { ResourceActionUpdate } from '../types';
/**
 * ResourceActionsApi - axios parameter creator
 * @export
 */
export const ResourceActionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new action that can affect the resource.
     * @summary Create Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionCreate} resourceActionCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceAction: async (
      projId: string,
      envId: string,
      resourceId: string,
      resourceActionCreate: ResourceActionCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createResourceAction', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('createResourceAction', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('createResourceAction', 'resourceId', resourceId);
      // verify required parameter 'resourceActionCreate' is not null or undefined
      assertParamExists('createResourceAction', 'resourceActionCreate', resourceActionCreate);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceActionCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceAction: async (
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteResourceAction', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteResourceAction', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('deleteResourceAction', 'resourceId', resourceId);
      // verify required parameter 'actionId' is not null or undefined
      assertParamExists('deleteResourceAction', 'actionId', actionId);
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a single action defined on the resource, if such action exists.
     * @summary Get Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceAction: async (
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getResourceAction', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getResourceAction', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('getResourceAction', 'resourceId', resourceId);
      // verify required parameter 'actionId' is not null or undefined
      assertParamExists('getResourceAction', 'actionId', actionId);
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all the actions defined on the resource.
     * @summary List Resource Actions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceActions: async (
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listResourceActions', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listResourceActions', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('listResourceActions', 'resourceId', resourceId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionUpdate} resourceActionUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceAction: async (
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      resourceActionUpdate: ResourceActionUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateResourceAction', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateResourceAction', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('updateResourceAction', 'resourceId', resourceId);
      // verify required parameter 'actionId' is not null or undefined
      assertParamExists('updateResourceAction', 'actionId', actionId);
      // verify required parameter 'resourceActionUpdate' is not null or undefined
      assertParamExists('updateResourceAction', 'resourceActionUpdate', resourceActionUpdate);
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceActionUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResourceActionsApi - functional programming interface
 * @export
 */
export const ResourceActionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResourceActionsApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new action that can affect the resource.
     * @summary Create Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionCreate} resourceActionCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      resourceActionCreate: ResourceActionCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceAction(
        projId,
        envId,
        resourceId,
        resourceActionCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceAction(
        projId,
        envId,
        resourceId,
        actionId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a single action defined on the resource, if such action exists.
     * @summary Get Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceAction(
        projId,
        envId,
        resourceId,
        actionId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all the actions defined on the resource.
     * @summary List Resource Actions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listResourceActions(
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceActionRead>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceActions(
        projId,
        envId,
        resourceId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionUpdate} resourceActionUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      resourceActionUpdate: ResourceActionUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceAction(
        projId,
        envId,
        resourceId,
        actionId,
        resourceActionUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ResourceActionsApi - factory interface
 * @export
 */
export const ResourceActionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ResourceActionsApiFp(configuration);
  return {
    /**
     * Creates a new action that can affect the resource.
     * @summary Create Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionCreate} resourceActionCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      resourceActionCreate: ResourceActionCreate,
      options?: any,
    ): AxiosPromise<ResourceActionRead> {
      return localVarFp
        .createResourceAction(projId, envId, resourceId, resourceActionCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteResourceAction(projId, envId, resourceId, actionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a single action defined on the resource, if such action exists.
     * @summary Get Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      options?: any,
    ): AxiosPromise<ResourceActionRead> {
      return localVarFp
        .getResourceAction(projId, envId, resourceId, actionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all the actions defined on the resource.
     * @summary List Resource Actions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceActions(
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<ResourceActionRead>> {
      return localVarFp
        .listResourceActions(projId, envId, resourceId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionUpdate} resourceActionUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceAction(
      projId: string,
      envId: string,
      resourceId: string,
      actionId: string,
      resourceActionUpdate: ResourceActionUpdate,
      options?: any,
    ): AxiosPromise<ResourceActionRead> {
      return localVarFp
        .updateResourceAction(projId, envId, resourceId, actionId, resourceActionUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createResourceAction operation in ResourceActionsApi.
 * @export
 * @interface ResourceActionsApiCreateResourceActionRequest
 */
export interface ResourceActionsApiCreateResourceActionRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiCreateResourceAction
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiCreateResourceAction
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiCreateResourceAction
   */
  readonly resourceId: string;

  /**
   *
   * @type {ResourceActionCreate}
   * @memberof ResourceActionsApiCreateResourceAction
   */
  readonly resourceActionCreate: ResourceActionCreate;
}

/**
 * Request parameters for deleteResourceAction operation in ResourceActionsApi.
 * @export
 * @interface ResourceActionsApiDeleteResourceActionRequest
 */
export interface ResourceActionsApiDeleteResourceActionRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiDeleteResourceAction
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiDeleteResourceAction
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiDeleteResourceAction
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiDeleteResourceAction
   */
  readonly actionId: string;
}

/**
 * Request parameters for getResourceAction operation in ResourceActionsApi.
 * @export
 * @interface ResourceActionsApiGetResourceActionRequest
 */
export interface ResourceActionsApiGetResourceActionRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiGetResourceAction
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiGetResourceAction
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiGetResourceAction
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiGetResourceAction
   */
  readonly actionId: string;
}

/**
 * Request parameters for listResourceActions operation in ResourceActionsApi.
 * @export
 * @interface ResourceActionsApiListResourceActionsRequest
 */
export interface ResourceActionsApiListResourceActionsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiListResourceActions
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiListResourceActions
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiListResourceActions
   */
  readonly resourceId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof ResourceActionsApiListResourceActions
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof ResourceActionsApiListResourceActions
   */
  readonly perPage?: number;
}

/**
 * Request parameters for updateResourceAction operation in ResourceActionsApi.
 * @export
 * @interface ResourceActionsApiUpdateResourceActionRequest
 */
export interface ResourceActionsApiUpdateResourceActionRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiUpdateResourceAction
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiUpdateResourceAction
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiUpdateResourceAction
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceActionsApiUpdateResourceAction
   */
  readonly actionId: string;

  /**
   *
   * @type {ResourceActionUpdate}
   * @memberof ResourceActionsApiUpdateResourceAction
   */
  readonly resourceActionUpdate: ResourceActionUpdate;
}

/**
 * ResourceActionsApi - object-oriented interface
 * @export
 * @class ResourceActionsApi
 * @extends {BaseAPI}
 */
export class ResourceActionsApi extends BaseAPI {
  /**
   * Creates a new action that can affect the resource.
   * @summary Create Resource Action
   * @param {ResourceActionsApiCreateResourceActionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceActionsApi
   */
  public createResourceAction(
    requestParameters: ResourceActionsApiCreateResourceActionRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceActionsApiFp(this.configuration)
      .createResourceAction(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.resourceActionCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes the action and all its related data. This includes any permissions granted to perform the action.
   * @summary Delete Resource Action
   * @param {ResourceActionsApiDeleteResourceActionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceActionsApi
   */
  public deleteResourceAction(
    requestParameters: ResourceActionsApiDeleteResourceActionRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceActionsApiFp(this.configuration)
      .deleteResourceAction(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.actionId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a single action defined on the resource, if such action exists.
   * @summary Get Resource Action
   * @param {ResourceActionsApiGetResourceActionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceActionsApi
   */
  public getResourceAction(
    requestParameters: ResourceActionsApiGetResourceActionRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceActionsApiFp(this.configuration)
      .getResourceAction(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.actionId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all the actions defined on the resource.
   * @summary List Resource Actions
   * @param {ResourceActionsApiListResourceActionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceActionsApi
   */
  public listResourceActions(
    requestParameters: ResourceActionsApiListResourceActionsRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceActionsApiFp(this.configuration)
      .listResourceActions(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
   * @summary Update Resource Action
   * @param {ResourceActionsApiUpdateResourceActionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceActionsApi
   */
  public updateResourceAction(
    requestParameters: ResourceActionsApiUpdateResourceActionRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceActionsApiFp(this.configuration)
      .updateResourceAction(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.actionId,
        requestParameters.resourceActionUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
