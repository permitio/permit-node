/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration.js';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base.js';
// @ts-ignore
import { HTTPValidationError } from '../types/index.js';
// @ts-ignore
import { ResourceInstanceCreateBulkOperation } from '../types/index.js';
// @ts-ignore
import { ResourceInstanceDeleteBulkOperation } from '../types/index.js';
// @ts-ignore
import { TenantCreateBulkOperation } from '../types/index.js';
// @ts-ignore
import { TenantDeleteBulkOperation } from '../types/index.js';
// @ts-ignore
import { UserCreateBulkOperation } from '../types/index.js';
// @ts-ignore
import { UserDeleteBulkOperation } from '../types/index.js';
// @ts-ignore
import { UserReplaceBulkOperation } from '../types/index.js';
/**
 * BulkOperationsApi - axios parameter creator
 * @export
 */
export const BulkOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {any} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateTenants: async (
      projId: any,
      envId: any,
      requestBody: { [key: string]: any },
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkCreateTenants', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkCreateTenants', 'envId', envId);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('bulkCreateTenants', 'requestBody', requestBody);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Bulk Create Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateUsers: async (
      projId: any,
      envId: any,
      userCreateBulkOperation: UserCreateBulkOperation,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkCreateUsers', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkCreateUsers', 'envId', envId);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('bulkCreateUsers', 'requestBody', userCreateBulkOperation);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreateBulkOperation,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteResourceInstances: async (
      projId: any,
      envId: any,
      resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkDeleteResourceInstances', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkDeleteResourceInstances', 'envId', envId);
      // verify required parameter 'resourceInstanceDeleteBulkOperation' is not null or undefined
      assertParamExists(
        'bulkDeleteResourceInstances',
        'resourceInstanceDeleteBulkOperation',
        resourceInstanceDeleteBulkOperation,
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceInstanceDeleteBulkOperation,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {any} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteTenants: async (
      projId: any,
      envId: any,
      requestBody: { [key: string]: any },
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkDeleteTenants', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkDeleteTenants', 'envId', envId);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('bulkDeleteTenants', 'requestBody', requestBody);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Bulk Delete Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteUsers: async (
      projId: any,
      envId: any,
      userDeleteBulkOperation: UserDeleteBulkOperation,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkDeleteUsers', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkDeleteUsers', 'envId', envId);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('bulkDeleteUsers', 'requestBody', userDeleteBulkOperation);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userDeleteBulkOperation,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceResourceInstances: async (
      projId: any,
      envId: any,
      resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkReplaceResourceInstances', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkReplaceResourceInstances', 'envId', envId);
      // verify required parameter 'resourceInstanceCreateBulkOperation' is not null or undefined
      assertParamExists(
        'bulkReplaceResourceInstances',
        'resourceInstanceCreateBulkOperation',
        resourceInstanceCreateBulkOperation,
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceInstanceCreateBulkOperation,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Bulk Replace Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userReplaceBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceUsers: async (
      projId: any,
      envId: any,
      userReplaceBulkOperation: UserReplaceBulkOperation,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('bulkReplaceUsers', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('bulkReplaceUsers', 'envId', envId);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('bulkReplaceUsers', 'requestBody', userReplaceBulkOperation);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userReplaceBulkOperation,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BulkOperationsApi - functional programming interface
 * @export
 */
export const BulkOperationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BulkOperationsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkCreateTenants(
      projId: any,
      envId: any,
      requestBody: { [key: string]: any },
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateTenants(
        projId,
        envId,
        requestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Create Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkCreateUsers(
      projId: any,
      envId: any,
      userCreateBulkOperation: UserCreateBulkOperation,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BulkOperationsApiBulkCreateUsersRequest>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateUsers(
        projId,
        envId,
        userCreateBulkOperation,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkDeleteResourceInstances(
      projId: any,
      envId: any,
      resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteResourceInstances(
        projId,
        envId,
        resourceInstanceDeleteBulkOperation,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkDeleteTenants(
      projId: any,
      envId: any,
      requestBody: { [key: string]: any },
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteTenants(
        projId,
        envId,
        requestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Delete Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkDeleteUsers(
      projId: any,
      envId: any,
      userDeleteBulkOperation: UserDeleteBulkOperation,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BulkOperationsApiBulkDeleteUsersRequest>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteUsers(
        projId,
        envId,
        userDeleteBulkOperation,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkReplaceResourceInstances(
      projId: any,
      envId: any,
      resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceResourceInstances(
        projId,
        envId,
        resourceInstanceCreateBulkOperation,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Replace Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userReplaceBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkReplaceUsers(
      projId: any,
      envId: any,
      userReplaceBulkOperation: UserReplaceBulkOperation,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BulkOperationsApiBulkReplaceUsersRequest>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceUsers(
        projId,
        envId,
        userReplaceBulkOperation,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * BulkOperationsApi - factory interface
 * @export
 */
export const BulkOperationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BulkOperationsApiFp(configuration);
  return {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateTenants(
      projId: any,
      envId: any,
      requestBody: { [key: string]: any },
      options?: any,
    ): AxiosPromise<{ [key: string]: any }> {
      return localVarFp
        .bulkCreateTenants(projId, envId, requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Create Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateUsers(
      projId: any,
      envId: any,
      userCreateBulkOperation: UserCreateBulkOperation,
      options?: any,
    ): AxiosPromise<BulkOperationsApiBulkCreateUsersRequest> {
      return localVarFp
        .bulkCreateUsers(projId, envId, userCreateBulkOperation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteResourceInstances(
      projId: any,
      envId: any,
      resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteTenants(
      projId: any,
      envId: any,
      requestBody: { [key: string]: any },
      options?: any,
    ): AxiosPromise<{ [key: string]: any }> {
      return localVarFp
        .bulkDeleteTenants(projId, envId, requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Delete Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteUsers(
      projId: any,
      envId: any,
      userDeleteBulkOperation: UserDeleteBulkOperation,
      options?: any,
    ): AxiosPromise<BulkOperationsApiBulkDeleteUsersRequest> {
      return localVarFp
        .bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceResourceInstances(
      projId: any,
      envId: any,
      resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Replace Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userReplaceBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceUsers(
      projId: any,
      envId: any,
      userReplaceBulkOperation: UserReplaceBulkOperation,
      options?: any,
    ): AxiosPromise<BulkOperationsApiBulkReplaceUsersRequest> {
      return localVarFp
        .bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for bulkCreateTenants operation in BulkOperationsApi.
 * @export
 * @interface BulkOperationsApiBulkCreateTenantsRequest
 */
export interface BulkOperationsApiBulkCreateTenantsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkCreateTenants
   */
  readonly projId: any;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkCreateTenants
   */
  readonly envId: any;

  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof BulkOperationsApiBulkCreateTenants
   */
  readonly requestBody: { [key: string]: any };
}

/**
 * Request parameters for bulkCreateUsers operation in BulkOperationsApi.
 * @export
 * @interface BulkOperationsApiBulkCreateUsersRequest
 */
export interface BulkOperationsApiBulkCreateUsersRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkCreateUsers
   */
  readonly projId: any;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkCreateUsers
   */
  readonly envId: any;

  /**
   *
   * @type {UserCreateBulkOperation}
   * @memberof BulkOperationsApiBulkCreateUsers
   */
  readonly userCreateBulkOperations: UserCreateBulkOperation;
}

/**
 * Request parameters for bulkDeleteResourceInstances operation in BulkOperationsApi.
 * @export
 * @interface BulkOperationsApiBulkDeleteResourceInstancesRequest
 */
export interface BulkOperationsApiBulkDeleteResourceInstancesRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkDeleteResourceInstances
   */
  readonly projId: any;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkDeleteResourceInstances
   */
  readonly envId: any;

  /**
   *
   * @type {ResourceInstanceDeleteBulkOperation}
   * @memberof BulkOperationsApiBulkDeleteResourceInstances
   */
  readonly resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation;
}

/**
 * Request parameters for bulkDeleteTenants operation in BulkOperationsApi.
 * @export
 * @interface BulkOperationsApiBulkDeleteTenantsRequest
 */
export interface BulkOperationsApiBulkDeleteTenantsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkDeleteTenants
   */
  readonly projId: any;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkDeleteTenants
   */
  readonly envId: any;

  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof BulkOperationsApiBulkDeleteTenants
   */
  readonly requestBody: { [key: string]: any };
}

/**
 * Request parameters for bulkDeleteUsers operation in BulkOperationsApi.
 * @export
 * @interface BulkOperationsApiBulkDeleteUsersRequest
 */
export interface BulkOperationsApiBulkDeleteUsersRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkDeleteUsers
   */
  readonly projId: any;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkDeleteUsers
   */
  readonly envId: any;

  /**
   *
   * @type {UserDeleteBulkOperation}
   * @memberof BulkOperationsApiBulkDeleteUsers
   */
  readonly userDeleteBulkOperation: UserDeleteBulkOperation;
}

/**
 * Request parameters for bulkReplaceResourceInstances operation in BulkOperationsApi.
 * @export
 * @interface BulkOperationsApiBulkReplaceResourceInstancesRequest
 */
export interface BulkOperationsApiBulkReplaceResourceInstancesRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkReplaceResourceInstances
   */
  readonly projId: any;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkReplaceResourceInstances
   */
  readonly envId: any;

  /**
   *
   * @type {ResourceInstanceCreateBulkOperation}
   * @memberof BulkOperationsApiBulkReplaceResourceInstances
   */
  readonly resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation;
}

/**
 * Request parameters for bulkReplaceUsers operation in BulkOperationsApi.
 * @export
 * @interface BulkOperationsApiBulkReplaceUsersRequest
 */
export interface BulkOperationsApiBulkReplaceUsersRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkReplaceUsers
   */
  readonly projId: any;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {any}
   * @memberof BulkOperationsApiBulkReplaceUsers
   */
  readonly envId: any;

  /**
   *
   * @type {UserReplaceBulkOperation}
   * @memberof BulkOperationsApiBulkReplaceUsers
   */
  readonly userReplaceBulkOperation: UserReplaceBulkOperation;
}

/**
 * BulkOperationsApi - object-oriented interface
 * @export
 * @class BulkOperationsApi
 * @extends {BaseAPI}
 */
export class BulkOperationsApi extends BaseAPI {
  /**
   *
   * @summary Bulk Create Tenants
   * @param {BulkOpertionsApiBulkCreateTenantsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  public bulkCreateTenants(
    requestParameters: BulkOperationsApiBulkCreateTenantsRequest,
    options?: AxiosRequestConfig,
  ) {
    return BulkOperationsApiFp(this.configuration)
      .bulkCreateTenants(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.requestBody,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Bulk Create Users
   * @param {BulkOperationsApiBulkCreateUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  public bulkCreateUsers(
    requestParameters: BulkOperationsApiBulkCreateUsersRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<any> {
    return BulkOperationsApiFp(this.configuration)
      .bulkCreateUsers(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.userCreateBulkOperations,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes many Resource Instances.
   * @summary Bulk Delete Resource Instances
   * @param {BulkOperationsApiBulkDeleteResourceInstancesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  public bulkDeleteResourceInstances(
    requestParameters: BulkOperationsApiBulkDeleteResourceInstancesRequest,
    options?: AxiosRequestConfig,
  ) {
    return BulkOperationsApiFp(this.configuration)
      .bulkDeleteResourceInstances(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceInstanceDeleteBulkOperation,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Bulk Delete Tenants
   * @param {BulkOperationsApiBulkDeleteTenantsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  public bulkDeleteTenants(
    requestParameters: BulkOperationsApiBulkDeleteTenantsRequest,
    options?: AxiosRequestConfig,
  ) {
    return BulkOperationsApiFp(this.configuration)
      .bulkDeleteTenants(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.requestBody,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Bulk Delete Users
   * @param {BulkOperationsApiBulkDeleteUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  public async bulkDeleteUsers(
    requestParameters: BulkOperationsApiBulkDeleteUsersRequest,
    options?: AxiosRequestConfig,
  ): Promise<AxiosPromise<any>> {
    let request = await BulkOperationsApiFp(this.configuration).bulkDeleteUsers(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.userDeleteBulkOperation,
      options,
    );
    return request(this.axios, this.basePath);
  }

  /**
   * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
   * @summary Bulk Replace Resource Instances
   * @param {BulkOperationsApiBulkReplaceResourceInstancesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  public bulkReplaceResourceInstances(
    requestParameters: BulkOperationsApiBulkReplaceResourceInstancesRequest,
    options?: AxiosRequestConfig,
  ) {
    return BulkOperationsApiFp(this.configuration)
      .bulkReplaceResourceInstances(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceInstanceCreateBulkOperation,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Bulk Replace Users
   * @param {BulkOperationsApiBulkReplaceUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  public bulkReplaceUsers(
    requestParameters: BulkOperationsApiBulkReplaceUsersRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<any> {
    return BulkOperationsApiFp(this.configuration)
      .bulkReplaceUsers(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.userReplaceBulkOperation,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
