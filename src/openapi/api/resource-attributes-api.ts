/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { ResourceAttributeCreate } from '../types';
// @ts-ignore
import { ResourceAttributeRead } from '../types';
// @ts-ignore
import { ResourceAttributeUpdate } from '../types';
/**
 * ResourceAttributesApi - axios parameter creator
 * @export
 */
export const ResourceAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new attribute as part of the resource definition.
     * @summary Create Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceAttributeCreate} resourceAttributeCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceAttribute: async (
      projId: string,
      envId: string,
      resourceId: string,
      resourceAttributeCreate: ResourceAttributeCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createResourceAttribute', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('createResourceAttribute', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('createResourceAttribute', 'resourceId', resourceId);
      // verify required parameter 'resourceAttributeCreate' is not null or undefined
      assertParamExists(
        'createResourceAttribute',
        'resourceAttributeCreate',
        resourceAttributeCreate,
      );
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceAttributeCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
     * @summary Delete Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceAttribute: async (
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteResourceAttribute', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteResourceAttribute', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('deleteResourceAttribute', 'resourceId', resourceId);
      // verify required parameter 'attributeId' is not null or undefined
      assertParamExists('deleteResourceAttribute', 'attributeId', attributeId);
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a single attribute defined on the resource, if such attribute exists.
     * @summary Get Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceAttribute: async (
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getResourceAttribute', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getResourceAttribute', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('getResourceAttribute', 'resourceId', resourceId);
      // verify required parameter 'attributeId' is not null or undefined
      assertParamExists('getResourceAttribute', 'attributeId', attributeId);
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all the attributes defined on the resource.
     * @summary List Resource Attributes
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceAttributes: async (
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listResourceAttributes', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listResourceAttributes', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('listResourceAttributes', 'resourceId', resourceId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {ResourceAttributeUpdate} resourceAttributeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceAttribute: async (
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      resourceAttributeUpdate: ResourceAttributeUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateResourceAttribute', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateResourceAttribute', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('updateResourceAttribute', 'resourceId', resourceId);
      // verify required parameter 'attributeId' is not null or undefined
      assertParamExists('updateResourceAttribute', 'attributeId', attributeId);
      // verify required parameter 'resourceAttributeUpdate' is not null or undefined
      assertParamExists(
        'updateResourceAttribute',
        'resourceAttributeUpdate',
        resourceAttributeUpdate,
      );
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceAttributeUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResourceAttributesApi - functional programming interface
 * @export
 */
export const ResourceAttributesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResourceAttributesApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new attribute as part of the resource definition.
     * @summary Create Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceAttributeCreate} resourceAttributeCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      resourceAttributeCreate: ResourceAttributeCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceAttribute(
        projId,
        envId,
        resourceId,
        resourceAttributeCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
     * @summary Delete Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceAttribute(
        projId,
        envId,
        resourceId,
        attributeId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a single attribute defined on the resource, if such attribute exists.
     * @summary Get Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceAttribute(
        projId,
        envId,
        resourceId,
        attributeId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all the attributes defined on the resource.
     * @summary List Resource Attributes
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listResourceAttributes(
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceAttributeRead>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceAttributes(
        projId,
        envId,
        resourceId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {ResourceAttributeUpdate} resourceAttributeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      resourceAttributeUpdate: ResourceAttributeUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceAttribute(
        projId,
        envId,
        resourceId,
        attributeId,
        resourceAttributeUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ResourceAttributesApi - factory interface
 * @export
 */
export const ResourceAttributesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ResourceAttributesApiFp(configuration);
  return {
    /**
     * Creates a new attribute as part of the resource definition.
     * @summary Create Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceAttributeCreate} resourceAttributeCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      resourceAttributeCreate: ResourceAttributeCreate,
      options?: any,
    ): AxiosPromise<ResourceAttributeRead> {
      return localVarFp
        .createResourceAttribute(projId, envId, resourceId, resourceAttributeCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
     * @summary Delete Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteResourceAttribute(projId, envId, resourceId, attributeId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a single attribute defined on the resource, if such attribute exists.
     * @summary Get Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      options?: any,
    ): AxiosPromise<ResourceAttributeRead> {
      return localVarFp
        .getResourceAttribute(projId, envId, resourceId, attributeId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all the attributes defined on the resource.
     * @summary List Resource Attributes
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceAttributes(
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<ResourceAttributeRead>> {
      return localVarFp
        .listResourceAttributes(projId, envId, resourceId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Attribute
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
     * @param {ResourceAttributeUpdate} resourceAttributeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceAttribute(
      projId: string,
      envId: string,
      resourceId: string,
      attributeId: string,
      resourceAttributeUpdate: ResourceAttributeUpdate,
      options?: any,
    ): AxiosPromise<ResourceAttributeRead> {
      return localVarFp
        .updateResourceAttribute(
          projId,
          envId,
          resourceId,
          attributeId,
          resourceAttributeUpdate,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createResourceAttribute operation in ResourceAttributesApi.
 * @export
 * @interface ResourceAttributesApiCreateResourceAttributeRequest
 */
export interface ResourceAttributesApiCreateResourceAttributeRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiCreateResourceAttribute
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiCreateResourceAttribute
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiCreateResourceAttribute
   */
  readonly resourceId: string;

  /**
   *
   * @type {ResourceAttributeCreate}
   * @memberof ResourceAttributesApiCreateResourceAttribute
   */
  readonly resourceAttributeCreate: ResourceAttributeCreate;
}

/**
 * Request parameters for deleteResourceAttribute operation in ResourceAttributesApi.
 * @export
 * @interface ResourceAttributesApiDeleteResourceAttributeRequest
 */
export interface ResourceAttributesApiDeleteResourceAttributeRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiDeleteResourceAttribute
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiDeleteResourceAttribute
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiDeleteResourceAttribute
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiDeleteResourceAttribute
   */
  readonly attributeId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof ResourceAttributesApiDeleteResourceAttribute
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof ResourceAttributesApiDeleteResourceAttribute
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getResourceAttribute operation in ResourceAttributesApi.
 * @export
 * @interface ResourceAttributesApiGetResourceAttributeRequest
 */
export interface ResourceAttributesApiGetResourceAttributeRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiGetResourceAttribute
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiGetResourceAttribute
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiGetResourceAttribute
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiGetResourceAttribute
   */
  readonly attributeId: string;
}

/**
 * Request parameters for listResourceAttributes operation in ResourceAttributesApi.
 * @export
 * @interface ResourceAttributesApiListResourceAttributesRequest
 */
export interface ResourceAttributesApiListResourceAttributesRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiListResourceAttributes
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiListResourceAttributes
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiListResourceAttributes
   */
  readonly resourceId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof ResourceAttributesApiListResourceAttributes
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof ResourceAttributesApiListResourceAttributes
   */
  readonly perPage?: number;
}

/**
 * Request parameters for updateResourceAttribute operation in ResourceAttributesApi.
 * @export
 * @interface ResourceAttributesApiUpdateResourceAttributeRequest
 */
export interface ResourceAttributesApiUpdateResourceAttributeRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiUpdateResourceAttribute
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiUpdateResourceAttribute
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiUpdateResourceAttribute
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceAttributesApiUpdateResourceAttribute
   */
  readonly attributeId: string;

  /**
   *
   * @type {ResourceAttributeUpdate}
   * @memberof ResourceAttributesApiUpdateResourceAttribute
   */
  readonly resourceAttributeUpdate: ResourceAttributeUpdate;
}

/**
 * ResourceAttributesApi - object-oriented interface
 * @export
 * @class ResourceAttributesApi
 * @extends {BaseAPI}
 */
export class ResourceAttributesApi extends BaseAPI {
  /**
   * Creates a new attribute as part of the resource definition.
   * @summary Create Resource Attribute
   * @param {ResourceAttributesApiCreateResourceAttributeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceAttributesApi
   */
  public createResourceAttribute(
    requestParameters: ResourceAttributesApiCreateResourceAttributeRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceAttributesApiFp(this.configuration)
      .createResourceAttribute(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.resourceAttributeCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
   * @summary Delete Resource Attribute
   * @param {ResourceAttributesApiDeleteResourceAttributeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceAttributesApi
   */
  public deleteResourceAttribute(
    requestParameters: ResourceAttributesApiDeleteResourceAttributeRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceAttributesApiFp(this.configuration)
      .deleteResourceAttribute(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.attributeId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a single attribute defined on the resource, if such attribute exists.
   * @summary Get Resource Attribute
   * @param {ResourceAttributesApiGetResourceAttributeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceAttributesApi
   */
  public getResourceAttribute(
    requestParameters: ResourceAttributesApiGetResourceAttributeRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceAttributesApiFp(this.configuration)
      .getResourceAttribute(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.attributeId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all the attributes defined on the resource.
   * @summary List Resource Attributes
   * @param {ResourceAttributesApiListResourceAttributesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceAttributesApi
   */
  public listResourceAttributes(
    requestParameters: ResourceAttributesApiListResourceAttributesRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceAttributesApiFp(this.configuration)
      .listResourceAttributes(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
   * @summary Update Resource Attribute
   * @param {ResourceAttributesApiUpdateResourceAttributeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceAttributesApi
   */
  public updateResourceAttribute(
    requestParameters: ResourceAttributesApiUpdateResourceAttributeRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceAttributesApiFp(this.configuration)
      .updateResourceAttribute(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.attributeId,
        requestParameters.resourceAttributeUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
