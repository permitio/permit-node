/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EnvironmentCreate } from '../types';
// @ts-ignore
import { EnvironmentRead } from '../types';
// @ts-ignore
import { EnvironmentUpdate } from '../types';
// @ts-ignore
import { HTTPValidationError } from '../types';
/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export const EnvironmentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment: async (
      projId: string,
      environmentCreate: EnvironmentCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createEnvironment', 'projId', projId);
      // verify required parameter 'environmentCreate' is not null or undefined
      assertParamExists('createEnvironment', 'environmentCreate', environmentCreate);
      const localVarPath = `/v2/projects/{proj_id}/envs`.replace(
        `{${'proj_id'}}`,
        encodeURIComponent(String(projId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        environmentCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment: async (
      projId: string,
      envId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteEnvironment', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteEnvironment', 'envId', envId);
      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment: async (
      projId: string,
      envId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getEnvironment', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getEnvironment', 'envId', envId);
      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments: async (
      projId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listEnvironments', 'projId', projId);
      const localVarPath = `/v2/projects/{proj_id}/envs`.replace(
        `{${'proj_id'}}`,
        encodeURIComponent(String(projId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment: async (
      projId: string,
      envId: string,
      environmentUpdate: EnvironmentUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateEnvironment', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateEnvironment', 'envId', envId);
      // verify required parameter 'environmentUpdate' is not null or undefined
      assertParamExists('updateEnvironment', 'environmentUpdate', environmentUpdate);
      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        environmentUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export const EnvironmentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EnvironmentsApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEnvironment(
      projId: string,
      environmentCreate: EnvironmentCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvironment(
        projId,
        environmentCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEnvironment(
      projId: string,
      envId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironment(
        projId,
        envId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEnvironment(
      projId: string,
      envId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironment(
        projId,
        envId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listEnvironments(
      projId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvironmentRead>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironments(
        projId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateEnvironment(
      projId: string,
      envId: string,
      environmentUpdate: EnvironmentUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnvironment(
        projId,
        envId,
        environmentUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * EnvironmentsApi - factory interface
 * @export
 */
export const EnvironmentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = EnvironmentsApiFp(configuration);
  return {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment(
      projId: string,
      environmentCreate: EnvironmentCreate,
      options?: any,
    ): AxiosPromise<EnvironmentRead> {
      return localVarFp
        .createEnvironment(projId, environmentCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(projId: string, envId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteEnvironment(projId, envId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(projId: string, envId: string, options?: any): AxiosPromise<EnvironmentRead> {
      return localVarFp
        .getEnvironment(projId, envId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments(
      projId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<EnvironmentRead>> {
      return localVarFp
        .listEnvironments(projId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment(
      projId: string,
      envId: string,
      environmentUpdate: EnvironmentUpdate,
      options?: any,
    ): AxiosPromise<EnvironmentRead> {
      return localVarFp
        .updateEnvironment(projId, envId, environmentUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiCreateEnvironmentRequest
 */
export interface EnvironmentsApiCreateEnvironmentRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiCreateEnvironment
   */
  readonly projId: string;

  /**
   *
   * @type {EnvironmentCreate}
   * @memberof EnvironmentsApiCreateEnvironment
   */
  readonly environmentCreate: EnvironmentCreate;
}

/**
 * Request parameters for deleteEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiDeleteEnvironmentRequest
 */
export interface EnvironmentsApiDeleteEnvironmentRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiDeleteEnvironment
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiDeleteEnvironment
   */
  readonly envId: string;
}

/**
 * Request parameters for getEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiGetEnvironmentRequest
 */
export interface EnvironmentsApiGetEnvironmentRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiGetEnvironment
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiGetEnvironment
   */
  readonly envId: string;
}

/**
 * Request parameters for listEnvironments operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiListEnvironmentsRequest
 */
export interface EnvironmentsApiListEnvironmentsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiListEnvironments
   */
  readonly projId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof EnvironmentsApiListEnvironments
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof EnvironmentsApiListEnvironments
   */
  readonly perPage?: number;
}

/**
 * Request parameters for updateEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiUpdateEnvironmentRequest
 */
export interface EnvironmentsApiUpdateEnvironmentRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiUpdateEnvironment
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof EnvironmentsApiUpdateEnvironment
   */
  readonly envId: string;

  /**
   *
   * @type {EnvironmentUpdate}
   * @memberof EnvironmentsApiUpdateEnvironment
   */
  readonly environmentUpdate: EnvironmentUpdate;
}

/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export class EnvironmentsApi extends BaseAPI {
  /**
   * Creates a new environment under a given project.
   * @summary Create Environment
   * @param {EnvironmentsApiCreateEnvironmentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EnvironmentsApi
   */
  public createEnvironment(
    requestParameters: EnvironmentsApiCreateEnvironmentRequest,
    options?: AxiosRequestConfig,
  ) {
    return EnvironmentsApiFp(this.configuration)
      .createEnvironment(requestParameters.projId, requestParameters.environmentCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes an environment and all its related data.
   * @summary Delete Environment
   * @param {EnvironmentsApiDeleteEnvironmentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EnvironmentsApi
   */
  public deleteEnvironment(
    requestParameters: EnvironmentsApiDeleteEnvironmentRequest,
    options?: AxiosRequestConfig,
  ) {
    return EnvironmentsApiFp(this.configuration)
      .deleteEnvironment(requestParameters.projId, requestParameters.envId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a single environment matching the given env_id, if such environment exists.
   * @summary Get Environment
   * @param {EnvironmentsApiGetEnvironmentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EnvironmentsApi
   */
  public getEnvironment(
    requestParameters: EnvironmentsApiGetEnvironmentRequest,
    options?: AxiosRequestConfig,
  ) {
    return EnvironmentsApiFp(this.configuration)
      .getEnvironment(requestParameters.projId, requestParameters.envId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all the environments under a given project.
   * @summary List Environments
   * @param {EnvironmentsApiListEnvironmentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EnvironmentsApi
   */
  public listEnvironments(
    requestParameters: EnvironmentsApiListEnvironmentsRequest,
    options?: AxiosRequestConfig,
  ) {
    return EnvironmentsApiFp(this.configuration)
      .listEnvironments(
        requestParameters.projId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates the environment.
   * @summary Update Environment
   * @param {EnvironmentsApiUpdateEnvironmentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EnvironmentsApi
   */
  public updateEnvironment(
    requestParameters: EnvironmentsApiUpdateEnvironmentRequest,
    options?: AxiosRequestConfig,
  ) {
    return EnvironmentsApiFp(this.configuration)
      .updateEnvironment(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.environmentUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
