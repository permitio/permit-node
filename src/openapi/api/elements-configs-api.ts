/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base.js';
// @ts-ignore
import { ElementsConfigCreate } from '../types';
// @ts-ignore
import { ElementsConfigRead } from '../types';
// @ts-ignore
import { ElementsConfigRuntimeRead } from '../types';
// @ts-ignore
import { ElementsConfigUpdate } from '../types';
// @ts-ignore
import { ElementsEnvTypeRead } from '../types';
// @ts-ignore
import { ElementsEnvTypeUpdate } from '../types';
// @ts-ignore
import { ElementsType } from '../types';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { PaginatedResultElementsConfigRead } from '../types';
/**
 * ElementsConfigsApi - axios parameter creator
 * @export
 */
export const ElementsConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createElementsConfig: async (
      projId: string,
      envId: string,
      elementsConfigCreate: ElementsConfigCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createElementsConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('createElementsConfig', 'envId', envId);
      // verify required parameter 'elementsConfigCreate' is not null or undefined
      assertParamExists('createElementsConfig', 'elementsConfigCreate', elementsConfigCreate);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsConfigCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteElementsConfig: async (
      elementsConfigId: string,
      projId: string,
      envId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'elementsConfigId' is not null or undefined
      assertParamExists('deleteElementsConfig', 'elementsConfigId', elementsConfigId);
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteElementsConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteElementsConfig', 'envId', envId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{elements_config_id}`
        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfig: async (
      projId: string,
      envId: string,
      elementsConfigId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getElementsConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getElementsConfig', 'envId', envId);
      // verify required parameter 'elementsConfigId' is not null or undefined
      assertParamExists('getElementsConfig', 'elementsConfigId', elementsConfigId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfigRuntime: async (
      projId: string,
      envId: string,
      elementsConfigId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getElementsConfigRuntime', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getElementsConfigRuntime', 'envId', envId);
      // verify required parameter 'elementsConfigId' is not null or undefined
      assertParamExists('getElementsConfigRuntime', 'elementsConfigId', elementsConfigId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/runtime`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsTypeConfig: async (
      projId: string,
      envId: string,
      elementType: ElementsType,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getElementsTypeConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getElementsTypeConfig', 'envId', envId);
      // verify required parameter 'elementType' is not null or undefined
      assertParamExists('getElementsTypeConfig', 'elementType', elementType);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listElementsConfigs: async (
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listElementsConfigs', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listElementsConfigs', 'envId', envId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsConfig: async (
      elementsConfigId: string,
      projId: string,
      envId: string,
      elementsConfigUpdate: ElementsConfigUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'elementsConfigId' is not null or undefined
      assertParamExists('updateElementsConfig', 'elementsConfigId', elementsConfigId);
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateElementsConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateElementsConfig', 'envId', envId);
      // verify required parameter 'elementsConfigUpdate' is not null or undefined
      assertParamExists('updateElementsConfig', 'elementsConfigUpdate', elementsConfigUpdate);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`
        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsConfigUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsTypePermissions: async (
      elementType: ElementsType,
      projId: string,
      envId: string,
      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'elementType' is not null or undefined
      assertParamExists('updateElementsTypePermissions', 'elementType', elementType);
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateElementsTypePermissions', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateElementsTypePermissions', 'envId', envId);
      // verify required parameter 'elementsEnvTypeUpdate' is not null or undefined
      assertParamExists(
        'updateElementsTypePermissions',
        'elementsEnvTypeUpdate',
        elementsEnvTypeUpdate,
      );
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`
        .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)))
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsEnvTypeUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ElementsConfigsApi - functional programming interface
 * @export
 */
export const ElementsConfigsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ElementsConfigsApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createElementsConfig(
      projId: string,
      envId: string,
      elementsConfigCreate: ElementsConfigCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createElementsConfig(
        projId,
        envId,
        elementsConfigCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteElementsConfig(
      elementsConfigId: string,
      projId: string,
      envId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElementsConfig(
        elementsConfigId,
        projId,
        envId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElementsConfig(
      projId: string,
      envId: string,
      elementsConfigId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfig(
        projId,
        envId,
        elementsConfigId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElementsConfigRuntime(
      projId: string,
      envId: string,
      elementsConfigId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRuntimeRead>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfigRuntime(
        projId,
        envId,
        elementsConfigId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElementsTypeConfig(
      projId: string,
      envId: string,
      elementType: ElementsType,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsTypeConfig(
        projId,
        envId,
        elementType,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listElementsConfigs(
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultElementsConfigRead>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listElementsConfigs(
        projId,
        envId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateElementsConfig(
      elementsConfigId: string,
      projId: string,
      envId: string,
      elementsConfigUpdate: ElementsConfigUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsConfig(
        elementsConfigId,
        projId,
        envId,
        elementsConfigUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateElementsTypePermissions(
      elementType: ElementsType,
      projId: string,
      envId: string,
      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsTypePermissions(
        elementType,
        projId,
        envId,
        elementsEnvTypeUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ElementsConfigsApi - factory interface
 * @export
 */
export const ElementsConfigsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ElementsConfigsApiFp(configuration);
  return {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createElementsConfig(
      projId: string,
      envId: string,
      elementsConfigCreate: ElementsConfigCreate,
      options?: any,
    ): AxiosPromise<ElementsConfigRead> {
      return localVarFp
        .createElementsConfig(projId, envId, elementsConfigCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteElementsConfig(
      elementsConfigId: string,
      projId: string,
      envId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteElementsConfig(elementsConfigId, projId, envId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfig(
      projId: string,
      envId: string,
      elementsConfigId: string,
      options?: any,
    ): AxiosPromise<ElementsConfigRead> {
      return localVarFp
        .getElementsConfig(projId, envId, elementsConfigId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfigRuntime(
      projId: string,
      envId: string,
      elementsConfigId: string,
      options?: any,
    ): AxiosPromise<ElementsConfigRuntimeRead> {
      return localVarFp
        .getElementsConfigRuntime(projId, envId, elementsConfigId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsTypeConfig(
      projId: string,
      envId: string,
      elementType: ElementsType,
      options?: any,
    ): AxiosPromise<ElementsEnvTypeRead> {
      return localVarFp
        .getElementsTypeConfig(projId, envId, elementType, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listElementsConfigs(
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<PaginatedResultElementsConfigRead> {
      return localVarFp
        .listElementsConfigs(projId, envId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsConfig(
      elementsConfigId: string,
      projId: string,
      envId: string,
      elementsConfigUpdate: ElementsConfigUpdate,
      options?: any,
    ): AxiosPromise<ElementsConfigRead> {
      return localVarFp
        .updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsTypePermissions(
      elementType: ElementsType,
      projId: string,
      envId: string,
      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,
      options?: any,
    ): AxiosPromise<ElementsEnvTypeRead> {
      return localVarFp
        .updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiCreateElementsConfigRequest
 */
export interface ElementsConfigsApiCreateElementsConfigRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiCreateElementsConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiCreateElementsConfig
   */
  readonly envId: string;

  /**
   *
   * @type {ElementsConfigCreate}
   * @memberof ElementsConfigsApiCreateElementsConfig
   */
  readonly elementsConfigCreate: ElementsConfigCreate;
}

/**
 * Request parameters for deleteElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiDeleteElementsConfigRequest
 */
export interface ElementsConfigsApiDeleteElementsConfigRequest {
  /**
   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiDeleteElementsConfig
   */
  readonly elementsConfigId: string;

  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiDeleteElementsConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiDeleteElementsConfig
   */
  readonly envId: string;
}

/**
 * Request parameters for getElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiGetElementsConfigRequest
 */
export interface ElementsConfigsApiGetElementsConfigRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsConfig
   */
  readonly envId: string;

  /**
   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsConfig
   */
  readonly elementsConfigId: string;
}

/**
 * Request parameters for getElementsConfigRuntime operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiGetElementsConfigRuntimeRequest
 */
export interface ElementsConfigsApiGetElementsConfigRuntimeRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsConfigRuntime
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsConfigRuntime
   */
  readonly envId: string;

  /**
   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsConfigRuntime
   */
  readonly elementsConfigId: string;
}

/**
 * Request parameters for getElementsTypeConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiGetElementsTypeConfigRequest
 */
export interface ElementsConfigsApiGetElementsTypeConfigRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsTypeConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiGetElementsTypeConfig
   */
  readonly envId: string;

  /**
   * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
   * @type {ElementsType}
   * @memberof ElementsConfigsApiGetElementsTypeConfig
   */
  readonly elementType: ElementsType;
}

/**
 * Request parameters for listElementsConfigs operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiListElementsConfigsRequest
 */
export interface ElementsConfigsApiListElementsConfigsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiListElementsConfigs
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiListElementsConfigs
   */
  readonly envId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof ElementsConfigsApiListElementsConfigs
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof ElementsConfigsApiListElementsConfigs
   */
  readonly perPage?: number;
}

/**
 * Request parameters for updateElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiUpdateElementsConfigRequest
 */
export interface ElementsConfigsApiUpdateElementsConfigRequest {
  /**
   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiUpdateElementsConfig
   */
  readonly elementsConfigId: string;

  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiUpdateElementsConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiUpdateElementsConfig
   */
  readonly envId: string;

  /**
   *
   * @type {ElementsConfigUpdate}
   * @memberof ElementsConfigsApiUpdateElementsConfig
   */
  readonly elementsConfigUpdate: ElementsConfigUpdate;
}

/**
 * Request parameters for updateElementsTypePermissions operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiUpdateElementsTypePermissionsRequest
 */
export interface ElementsConfigsApiUpdateElementsTypePermissionsRequest {
  /**
   * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
   * @type {ElementsType}
   * @memberof ElementsConfigsApiUpdateElementsTypePermissions
   */
  readonly elementType: ElementsType;

  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiUpdateElementsTypePermissions
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ElementsConfigsApiUpdateElementsTypePermissions
   */
  readonly envId: string;

  /**
   *
   * @type {ElementsEnvTypeUpdate}
   * @memberof ElementsConfigsApiUpdateElementsTypePermissions
   */
  readonly elementsEnvTypeUpdate: ElementsEnvTypeUpdate;
}

/**
 * ElementsConfigsApi - object-oriented interface
 * @export
 * @class ElementsConfigsApi
 * @extends {BaseAPI}
 */
export class ElementsConfigsApi extends BaseAPI {
  /**
   * Creates a new elements_config under the active organization.
   * @summary Create Elements Config
   * @param {ElementsConfigsApiCreateElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public createElementsConfig(
    requestParameters: ElementsConfigsApiCreateElementsConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .createElementsConfig(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.elementsConfigCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes the elements_config and all its related data.
   * @summary Delete Elements Config
   * @param {ElementsConfigsApiDeleteElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public deleteElementsConfig(
    requestParameters: ElementsConfigsApiDeleteElementsConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .deleteElementsConfig(
        requestParameters.elementsConfigId,
        requestParameters.projId,
        requestParameters.envId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
   * @summary Get Elements Config
   * @param {ElementsConfigsApiGetElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public getElementsConfig(
    requestParameters: ElementsConfigsApiGetElementsConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .getElementsConfig(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.elementsConfigId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
   * @summary Get Elements Config Runtime
   * @param {ElementsConfigsApiGetElementsConfigRuntimeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public getElementsConfigRuntime(
    requestParameters: ElementsConfigsApiGetElementsConfigRuntimeRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .getElementsConfigRuntime(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.elementsConfigId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Elements Type Config
   * @param {ElementsConfigsApiGetElementsTypeConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public getElementsTypeConfig(
    requestParameters: ElementsConfigsApiGetElementsTypeConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .getElementsTypeConfig(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.elementType,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all the elements_configs under the active organization.
   * @summary List Elements Configs
   * @param {ElementsConfigsApiListElementsConfigsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public listElementsConfigs(
    requestParameters: ElementsConfigsApiListElementsConfigsRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .listElementsConfigs(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates the elements_config.
   * @summary Update Elements Config
   * @param {ElementsConfigsApiUpdateElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public updateElementsConfig(
    requestParameters: ElementsConfigsApiUpdateElementsConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .updateElementsConfig(
        requestParameters.elementsConfigId,
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.elementsConfigUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Elements Type Permissions
   * @param {ElementsConfigsApiUpdateElementsTypePermissionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  public updateElementsTypePermissions(
    requestParameters: ElementsConfigsApiUpdateElementsTypePermissionsRequest,
    options?: AxiosRequestConfig,
  ) {
    return ElementsConfigsApiFp(this.configuration)
      .updateElementsTypePermissions(
        requestParameters.elementType,
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.elementsEnvTypeUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
