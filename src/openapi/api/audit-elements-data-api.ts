/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base.js';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { PaginatedResultAuditLog } from '../types';
/**
 * AuditElementsDataApi - axios parameter creator
 * @export
 */
export const AuditElementsDataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Lists audit logs for for specific elements config (tenant scope)
     * @summary List audit logs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsListAuditLogs: async (
      projId: string,
      envId: string,
      elementsConfigId: string,
      search?: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('elementsListAuditLogs', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('elementsListAuditLogs', 'envId', envId);
      // verify required parameter 'elementsConfigId' is not null or undefined
      assertParamExists('elementsListAuditLogs', 'elementsConfigId', elementsConfigId);
      const localVarPath =
        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/audit_logs`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuditElementsDataApi - functional programming interface
 * @export
 */
export const AuditElementsDataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuditElementsDataApiAxiosParamCreator(configuration);
  return {
    /**
     * Lists audit logs for for specific elements config (tenant scope)
     * @summary List audit logs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async elementsListAuditLogs(
      projId: string,
      envId: string,
      elementsConfigId: string,
      search?: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultAuditLog>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListAuditLogs(
        projId,
        envId,
        elementsConfigId,
        search,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuditElementsDataApi - factory interface
 * @export
 */
export const AuditElementsDataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuditElementsDataApiFp(configuration);
  return {
    /**
     * Lists audit logs for for specific elements config (tenant scope)
     * @summary List audit logs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsListAuditLogs(
      projId: string,
      envId: string,
      elementsConfigId: string,
      search?: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<PaginatedResultAuditLog> {
      return localVarFp
        .elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for elementsListAuditLogs operation in AuditElementsDataApi.
 * @export
 * @interface AuditElementsDataApiElementsListAuditLogsRequest
 */
export interface AuditElementsDataApiElementsListAuditLogsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof AuditElementsDataApiElementsListAuditLogs
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof AuditElementsDataApiElementsListAuditLogs
   */
  readonly envId: string;

  /**
   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof AuditElementsDataApiElementsListAuditLogs
   */
  readonly elementsConfigId: string;

  /**
   * Text search for the email field
   * @type {string}
   * @memberof AuditElementsDataApiElementsListAuditLogs
   */
  readonly search?: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof AuditElementsDataApiElementsListAuditLogs
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof AuditElementsDataApiElementsListAuditLogs
   */
  readonly perPage?: number;
}

/**
 * AuditElementsDataApi - object-oriented interface
 * @export
 * @class AuditElementsDataApi
 * @extends {BaseAPI}
 */
export class AuditElementsDataApi extends BaseAPI {
  /**
   * Lists audit logs for for specific elements config (tenant scope)
   * @summary List audit logs
   * @param {AuditElementsDataApiElementsListAuditLogsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditElementsDataApi
   */
  public elementsListAuditLogs(
    requestParameters: AuditElementsDataApiElementsListAuditLogsRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuditElementsDataApiFp(this.configuration)
      .elementsListAuditLogs(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.elementsConfigId,
        requestParameters.search,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
