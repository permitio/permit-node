/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { ResourceInstanceCreate } from '../types';
// @ts-ignore
import { ResourceInstanceRead } from '../types';
// @ts-ignore
import { ResourceInstanceUpdate } from '../types';
/**
 * ResourceInstancesApi - axios parameter creator
 * @export
 */
export const ResourceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
     * @summary Create Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreate} resourceInstanceCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceInstance: async (
      projId: string,
      envId: string,
      resourceInstanceCreate: ResourceInstanceCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createResourceInstance', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('createResourceInstance', 'envId', envId);
      // verify required parameter 'resourceInstanceCreate' is not null or undefined
      assertParamExists('createResourceInstance', 'resourceInstanceCreate', resourceInstanceCreate);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceInstanceCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes the instance and all its related data.
     * @summary Delete Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceInstance: async (
      projId: string,
      envId: string,
      instanceId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteResourceInstance', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteResourceInstance', 'envId', envId);
      // verify required parameter 'instanceId' is not null or undefined
      assertParamExists('deleteResourceInstance', 'instanceId', instanceId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a instance, if such instance exists. Otherwise returns 404.
     * @summary Get Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceInstance: async (
      projId: string,
      envId: string,
      instanceId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getResourceInstance', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getResourceInstance', 'envId', envId);
      // verify required parameter 'instanceId' is not null or undefined
      assertParamExists('getResourceInstance', 'instanceId', instanceId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all the resource instances defined within an environment.
     * @summary List Resource Instances
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [tenant] The tenant key or id to filter by
     * @param {string} [resource] The resource key or id to filter by
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceInstances: async (
      projId: string,
      envId: string,
      tenant?: string,
      resource?: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listResourceInstances', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listResourceInstances', 'envId', envId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (tenant !== undefined) {
        localVarQueryParameter['tenant'] = tenant;
      }

      if (resource !== undefined) {
        localVarQueryParameter['resource'] = resource;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceUpdate} resourceInstanceUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceInstance: async (
      projId: string,
      envId: string,
      instanceId: string,
      resourceInstanceUpdate: ResourceInstanceUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateResourceInstance', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateResourceInstance', 'envId', envId);
      // verify required parameter 'instanceId' is not null or undefined
      assertParamExists('updateResourceInstance', 'instanceId', instanceId);
      // verify required parameter 'resourceInstanceUpdate' is not null or undefined
      assertParamExists('updateResourceInstance', 'resourceInstanceUpdate', resourceInstanceUpdate);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceInstanceUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResourceInstancesApi - functional programming interface
 * @export
 */
export const ResourceInstancesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResourceInstancesApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
     * @summary Create Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreate} resourceInstanceCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createResourceInstance(
      projId: string,
      envId: string,
      resourceInstanceCreate: ResourceInstanceCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceInstanceRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceInstance(
        projId,
        envId,
        resourceInstanceCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes the instance and all its related data.
     * @summary Delete Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteResourceInstance(
      projId: string,
      envId: string,
      instanceId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceInstance(
        projId,
        envId,
        instanceId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a instance, if such instance exists. Otherwise returns 404.
     * @summary Get Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getResourceInstance(
      projId: string,
      envId: string,
      instanceId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceInstanceRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceInstance(
        projId,
        envId,
        instanceId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all the resource instances defined within an environment.
     * @summary List Resource Instances
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [tenant] The tenant key or id to filter by
     * @param {string} [resource] The resource key or id to filter by
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listResourceInstances(
      projId: string,
      envId: string,
      tenant?: string,
      resource?: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceInstanceRead>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceInstances(
        projId,
        envId,
        tenant,
        resource,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceUpdate} resourceInstanceUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateResourceInstance(
      projId: string,
      envId: string,
      instanceId: string,
      resourceInstanceUpdate: ResourceInstanceUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceInstanceRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceInstance(
        projId,
        envId,
        instanceId,
        resourceInstanceUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ResourceInstancesApi - factory interface
 * @export
 */
export const ResourceInstancesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ResourceInstancesApiFp(configuration);
  return {
    /**
     * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
     * @summary Create Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreate} resourceInstanceCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceInstance(
      projId: string,
      envId: string,
      resourceInstanceCreate: ResourceInstanceCreate,
      options?: any,
    ): AxiosPromise<ResourceInstanceRead> {
      return localVarFp
        .createResourceInstance(projId, envId, resourceInstanceCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes the instance and all its related data.
     * @summary Delete Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceInstance(
      projId: string,
      envId: string,
      instanceId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteResourceInstance(projId, envId, instanceId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a instance, if such instance exists. Otherwise returns 404.
     * @summary Get Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceInstance(
      projId: string,
      envId: string,
      instanceId: string,
      options?: any,
    ): AxiosPromise<ResourceInstanceRead> {
      return localVarFp
        .getResourceInstance(projId, envId, instanceId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all the resource instances defined within an environment.
     * @summary List Resource Instances
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [tenant] The tenant key or id to filter by
     * @param {string} [resource] The resource key or id to filter by
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceInstances(
      projId: string,
      envId: string,
      tenant?: string,
      resource?: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<ResourceInstanceRead>> {
      return localVarFp
        .listResourceInstances(projId, envId, tenant, resource, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Instance
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceUpdate} resourceInstanceUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceInstance(
      projId: string,
      envId: string,
      instanceId: string,
      resourceInstanceUpdate: ResourceInstanceUpdate,
      options?: any,
    ): AxiosPromise<ResourceInstanceRead> {
      return localVarFp
        .updateResourceInstance(projId, envId, instanceId, resourceInstanceUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createResourceInstance operation in ResourceInstancesApi.
 * @export
 * @interface ResourceInstancesApiCreateResourceInstanceRequest
 */
export interface ResourceInstancesApiCreateResourceInstanceRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiCreateResourceInstance
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiCreateResourceInstance
   */
  readonly envId: string;

  /**
   *
   * @type {ResourceInstanceCreate}
   * @memberof ResourceInstancesApiCreateResourceInstance
   */
  readonly resourceInstanceCreate: ResourceInstanceCreate;
}

/**
 * Request parameters for deleteResourceInstance operation in ResourceInstancesApi.
 * @export
 * @interface ResourceInstancesApiDeleteResourceInstanceRequest
 */
export interface ResourceInstancesApiDeleteResourceInstanceRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiDeleteResourceInstance
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiDeleteResourceInstance
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiDeleteResourceInstance
   */
  readonly instanceId: string;
}

/**
 * Request parameters for getResourceInstance operation in ResourceInstancesApi.
 * @export
 * @interface ResourceInstancesApiGetResourceInstanceRequest
 */
export interface ResourceInstancesApiGetResourceInstanceRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiGetResourceInstance
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiGetResourceInstance
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiGetResourceInstance
   */
  readonly instanceId: string;
}

/**
 * Request parameters for listResourceInstances operation in ResourceInstancesApi.
 * @export
 * @interface ResourceInstancesApiListResourceInstancesRequest
 */
export interface ResourceInstancesApiListResourceInstancesRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiListResourceInstances
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiListResourceInstances
   */
  readonly envId: string;

  /**
   * The tenant key or id to filter by
   * @type {string}
   * @memberof ResourceInstancesApiListResourceInstances
   */
  readonly tenant?: string;

  /**
   * The resource key or id to filter by
   * @type {string}
   * @memberof ResourceInstancesApiListResourceInstances
   */
  readonly resource?: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof ResourceInstancesApiListResourceInstances
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof ResourceInstancesApiListResourceInstances
   */
  readonly perPage?: number;
}

/**
 * Request parameters for updateResourceInstance operation in ResourceInstancesApi.
 * @export
 * @interface ResourceInstancesApiUpdateResourceInstanceRequest
 */
export interface ResourceInstancesApiUpdateResourceInstanceRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiUpdateResourceInstance
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiUpdateResourceInstance
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceInstancesApiUpdateResourceInstance
   */
  readonly instanceId: string;

  /**
   *
   * @type {ResourceInstanceUpdate}
   * @memberof ResourceInstancesApiUpdateResourceInstance
   */
  readonly resourceInstanceUpdate: ResourceInstanceUpdate;
}

/**
 * ResourceInstancesApi - object-oriented interface
 * @export
 * @class ResourceInstancesApi
 * @extends {BaseAPI}
 */
export class ResourceInstancesApi extends BaseAPI {
  /**
   * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
   * @summary Create Resource Instance
   * @param {ResourceInstancesApiCreateResourceInstanceRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceInstancesApi
   */
  public createResourceInstance(
    requestParameters: ResourceInstancesApiCreateResourceInstanceRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceInstancesApiFp(this.configuration)
      .createResourceInstance(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceInstanceCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes the instance and all its related data.
   * @summary Delete Resource Instance
   * @param {ResourceInstancesApiDeleteResourceInstanceRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceInstancesApi
   */
  public deleteResourceInstance(
    requestParameters: ResourceInstancesApiDeleteResourceInstanceRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceInstancesApiFp(this.configuration)
      .deleteResourceInstance(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.instanceId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a instance, if such instance exists. Otherwise returns 404.
   * @summary Get Resource Instance
   * @param {ResourceInstancesApiGetResourceInstanceRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceInstancesApi
   */
  public getResourceInstance(
    requestParameters: ResourceInstancesApiGetResourceInstanceRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceInstancesApiFp(this.configuration)
      .getResourceInstance(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.instanceId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all the resource instances defined within an environment.
   * @summary List Resource Instances
   * @param {ResourceInstancesApiListResourceInstancesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceInstancesApi
   */
  public listResourceInstances(
    requestParameters: ResourceInstancesApiListResourceInstancesRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceInstancesApiFp(this.configuration)
      .listResourceInstances(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.tenant,
        requestParameters.resource,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
   * @summary Update Resource Instance
   * @param {ResourceInstancesApiUpdateResourceInstanceRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceInstancesApi
   */
  public updateResourceInstance(
    requestParameters: ResourceInstancesApiUpdateResourceInstanceRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceInstancesApiFp(this.configuration)
      .updateResourceInstance(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.instanceId,
        requestParameters.resourceInstanceUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
