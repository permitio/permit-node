/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddRolePermissions } from '../types';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { RemoveRolePermissions } from '../types';
// @ts-ignore
import { RoleCreate } from '../types';
// @ts-ignore
import { RoleRead } from '../types';
// @ts-ignore
import { RoleUpdate } from '../types';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
     * @summary Add Parent Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParentRole: async (
      projId: string,
      envId: string,
      roleId: string,
      parentRoleId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('addParentRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('addParentRole', 'envId', envId);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('addParentRole', 'roleId', roleId);
      // verify required parameter 'parentRoleId' is not null or undefined
      assertParamExists('addParentRole', 'parentRoleId', parentRoleId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Assign Permissions To Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {AddRolePermissions} addRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignPermissionsToRole: async (
      projId: string,
      envId: string,
      roleId: string,
      addRolePermissions: AddRolePermissions,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('assignPermissionsToRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('assignPermissionsToRole', 'envId', envId);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('assignPermissionsToRole', 'roleId', roleId);
      // verify required parameter 'addRolePermissions' is not null or undefined
      assertParamExists('assignPermissionsToRole', 'addRolePermissions', addRolePermissions);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addRolePermissions,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new tenant role.
     * @summary Create Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleCreate} roleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole: async (
      projId: string,
      envId: string,
      roleCreate: RoleCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('createRole', 'envId', envId);
      // verify required parameter 'roleCreate' is not null or undefined
      assertParamExists('createRole', 'roleCreate', roleCreate);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: async (
      projId: string,
      envId: string,
      roleId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteRole', 'envId', envId);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('deleteRole', 'roleId', roleId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a single tenant role, if such role exists.
     * @summary Get Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole: async (
      projId: string,
      envId: string,
      roleId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getRole', 'envId', envId);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('getRole', 'roleId', roleId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all tenant roles.
     * @summary List Roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles: async (
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listRoles', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listRoles', 'envId', envId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
     * @summary Remove Parent Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParentRole: async (
      projId: string,
      envId: string,
      roleId: string,
      parentRoleId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('removeParentRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('removeParentRole', 'envId', envId);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('removeParentRole', 'roleId', roleId);
      // verify required parameter 'parentRoleId' is not null or undefined
      assertParamExists('removeParentRole', 'parentRoleId', parentRoleId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))
        .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions From Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RemoveRolePermissions} removeRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePermissionsFromRole: async (
      projId: string,
      envId: string,
      roleId: string,
      removeRolePermissions: RemoveRolePermissions,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('removePermissionsFromRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('removePermissionsFromRole', 'envId', envId);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('removePermissionsFromRole', 'roleId', roleId);
      // verify required parameter 'removeRolePermissions' is not null or undefined
      assertParamExists(
        'removePermissionsFromRole',
        'removeRolePermissions',
        removeRolePermissions,
      );
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        removeRolePermissions,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
     * @summary Update Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RoleUpdate} roleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRole: async (
      projId: string,
      envId: string,
      roleId: string,
      roleUpdate: RoleUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateRole', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateRole', 'envId', envId);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('updateRole', 'roleId', roleId);
      // verify required parameter 'roleUpdate' is not null or undefined
      assertParamExists('updateRole', 'roleUpdate', roleUpdate);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
     * @summary Add Parent Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addParentRole(
      projId: string,
      envId: string,
      roleId: string,
      parentRoleId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addParentRole(
        projId,
        envId,
        roleId,
        parentRoleId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Assign Permissions To Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {AddRolePermissions} addRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async assignPermissionsToRole(
      projId: string,
      envId: string,
      roleId: string,
      addRolePermissions: AddRolePermissions,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToRole(
        projId,
        envId,
        roleId,
        addRolePermissions,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Creates a new tenant role.
     * @summary Create Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleCreate} roleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRole(
      projId: string,
      envId: string,
      roleCreate: RoleCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(
        projId,
        envId,
        roleCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRole(
      projId: string,
      envId: string,
      roleId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(
        projId,
        envId,
        roleId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a single tenant role, if such role exists.
     * @summary Get Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRole(
      projId: string,
      envId: string,
      roleId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(
        projId,
        envId,
        roleId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all tenant roles.
     * @summary List Roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listRoles(
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleRead>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(
        projId,
        envId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
     * @summary Remove Parent Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeParentRole(
      projId: string,
      envId: string,
      roleId: string,
      parentRoleId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeParentRole(
        projId,
        envId,
        roleId,
        parentRoleId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions From Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RemoveRolePermissions} removeRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePermissionsFromRole(
      projId: string,
      envId: string,
      roleId: string,
      removeRolePermissions: RemoveRolePermissions,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePermissionsFromRole(
        projId,
        envId,
        roleId,
        removeRolePermissions,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
     * @summary Update Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RoleUpdate} roleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRole(
      projId: string,
      envId: string,
      roleId: string,
      roleUpdate: RoleUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(
        projId,
        envId,
        roleId,
        roleUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RolesApiFp(configuration);
  return {
    /**
     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
     * @summary Add Parent Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParentRole(
      projId: string,
      envId: string,
      roleId: string,
      parentRoleId: string,
      options?: any,
    ): AxiosPromise<RoleRead> {
      return localVarFp
        .addParentRole(projId, envId, roleId, parentRoleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Assign Permissions To Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {AddRolePermissions} addRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignPermissionsToRole(
      projId: string,
      envId: string,
      roleId: string,
      addRolePermissions: AddRolePermissions,
      options?: any,
    ): AxiosPromise<RoleRead> {
      return localVarFp
        .assignPermissionsToRole(projId, envId, roleId, addRolePermissions, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new tenant role.
     * @summary Create Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RoleCreate} roleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(
      projId: string,
      envId: string,
      roleCreate: RoleCreate,
      options?: any,
    ): AxiosPromise<RoleRead> {
      return localVarFp
        .createRole(projId, envId, roleCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(projId: string, envId: string, roleId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteRole(projId, envId, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a single tenant role, if such role exists.
     * @summary Get Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole(projId: string, envId: string, roleId: string, options?: any): AxiosPromise<RoleRead> {
      return localVarFp
        .getRole(projId, envId, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all tenant roles.
     * @summary List Roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<RoleRead>> {
      return localVarFp
        .listRoles(projId, envId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
     * @summary Remove Parent Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParentRole(
      projId: string,
      envId: string,
      roleId: string,
      parentRoleId: string,
      options?: any,
    ): AxiosPromise<RoleRead> {
      return localVarFp
        .removeParentRole(projId, envId, roleId, parentRoleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions From Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RemoveRolePermissions} removeRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePermissionsFromRole(
      projId: string,
      envId: string,
      roleId: string,
      removeRolePermissions: RemoveRolePermissions,
      options?: any,
    ): AxiosPromise<RoleRead> {
      return localVarFp
        .removePermissionsFromRole(projId, envId, roleId, removeRolePermissions, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
     * @summary Update Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RoleUpdate} roleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRole(
      projId: string,
      envId: string,
      roleId: string,
      roleUpdate: RoleUpdate,
      options?: any,
    ): AxiosPromise<RoleRead> {
      return localVarFp
        .updateRole(projId, envId, roleId, roleUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for addParentRole operation in RolesApi.
 * @export
 * @interface RolesApiAddParentRoleRequest
 */
export interface RolesApiAddParentRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiAddParentRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiAddParentRole
   */
  readonly envId: string;

  /**
   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiAddParentRole
   */
  readonly roleId: string;

  /**
   * Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiAddParentRole
   */
  readonly parentRoleId: string;
}

/**
 * Request parameters for assignPermissionsToRole operation in RolesApi.
 * @export
 * @interface RolesApiAssignPermissionsToRoleRequest
 */
export interface RolesApiAssignPermissionsToRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiAssignPermissionsToRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiAssignPermissionsToRole
   */
  readonly envId: string;

  /**
   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiAssignPermissionsToRole
   */
  readonly roleId: string;

  /**
   *
   * @type {AddRolePermissions}
   * @memberof RolesApiAssignPermissionsToRole
   */
  readonly addRolePermissions: AddRolePermissions;
}

/**
 * Request parameters for createRole operation in RolesApi.
 * @export
 * @interface RolesApiCreateRoleRequest
 */
export interface RolesApiCreateRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiCreateRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiCreateRole
   */
  readonly envId: string;

  /**
   *
   * @type {RoleCreate}
   * @memberof RolesApiCreateRole
   */
  readonly roleCreate: RoleCreate;
}

/**
 * Request parameters for deleteRole operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleRequest
 */
export interface RolesApiDeleteRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiDeleteRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiDeleteRole
   */
  readonly envId: string;

  /**
   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiDeleteRole
   */
  readonly roleId: string;
}

/**
 * Request parameters for getRole operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleRequest
 */
export interface RolesApiGetRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiGetRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiGetRole
   */
  readonly envId: string;

  /**
   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiGetRole
   */
  readonly roleId: string;
}

/**
 * Request parameters for listRoles operation in RolesApi.
 * @export
 * @interface RolesApiListRolesRequest
 */
export interface RolesApiListRolesRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiListRoles
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiListRoles
   */
  readonly envId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof RolesApiListRoles
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof RolesApiListRoles
   */
  readonly perPage?: number;
}

/**
 * Request parameters for removeParentRole operation in RolesApi.
 * @export
 * @interface RolesApiRemoveParentRoleRequest
 */
export interface RolesApiRemoveParentRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiRemoveParentRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiRemoveParentRole
   */
  readonly envId: string;

  /**
   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiRemoveParentRole
   */
  readonly roleId: string;

  /**
   * Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiRemoveParentRole
   */
  readonly parentRoleId: string;
}

/**
 * Request parameters for removePermissionsFromRole operation in RolesApi.
 * @export
 * @interface RolesApiRemovePermissionsFromRoleRequest
 */
export interface RolesApiRemovePermissionsFromRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiRemovePermissionsFromRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiRemovePermissionsFromRole
   */
  readonly envId: string;

  /**
   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiRemovePermissionsFromRole
   */
  readonly roleId: string;

  /**
   *
   * @type {RemoveRolePermissions}
   * @memberof RolesApiRemovePermissionsFromRole
   */
  readonly removeRolePermissions: RemoveRolePermissions;
}

/**
 * Request parameters for updateRole operation in RolesApi.
 * @export
 * @interface RolesApiUpdateRoleRequest
 */
export interface RolesApiUpdateRoleRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiUpdateRole
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiUpdateRole
   */
  readonly envId: string;

  /**
   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof RolesApiUpdateRole
   */
  readonly roleId: string;

  /**
   *
   * @type {RoleUpdate}
   * @memberof RolesApiUpdateRole
   */
  readonly roleUpdate: RoleUpdate;
}

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
  /**
   * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
   * @summary Add Parent Role
   * @param {RolesApiAddParentRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public addParentRole(
    requestParameters: RolesApiAddParentRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .addParentRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleId,
        requestParameters.parentRoleId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
   * @summary Assign Permissions To Role
   * @param {RolesApiAssignPermissionsToRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public assignPermissionsToRole(
    requestParameters: RolesApiAssignPermissionsToRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .assignPermissionsToRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleId,
        requestParameters.addRolePermissions,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new tenant role.
   * @summary Create Role
   * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public createRole(requestParameters: RolesApiCreateRoleRequest, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .createRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
   * @summary Delete Role
   * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public deleteRole(requestParameters: RolesApiDeleteRoleRequest, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .deleteRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a single tenant role, if such role exists.
   * @summary Get Role
   * @param {RolesApiGetRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public getRole(requestParameters: RolesApiGetRoleRequest, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .getRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all tenant roles.
   * @summary List Roles
   * @param {RolesApiListRolesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public listRoles(requestParameters: RolesApiListRolesRequest, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .listRoles(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
   * @summary Remove Parent Role
   * @param {RolesApiRemoveParentRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public removeParentRole(
    requestParameters: RolesApiRemoveParentRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .removeParentRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleId,
        requestParameters.parentRoleId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
   * @summary Remove Permissions From Role
   * @param {RolesApiRemovePermissionsFromRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public removePermissionsFromRole(
    requestParameters: RolesApiRemovePermissionsFromRoleRequest,
    options?: AxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .removePermissionsFromRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleId,
        requestParameters.removeRolePermissions,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
   * @summary Update Role
   * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public updateRole(requestParameters: RolesApiUpdateRoleRequest, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .updateRole(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.roleId,
        requestParameters.roleUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
