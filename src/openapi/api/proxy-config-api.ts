/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { ProxyConfigCreate } from '../types';
// @ts-ignore
import { ProxyConfigRead } from '../types';
// @ts-ignore
import { ProxyConfigUpdate } from '../types';
/**
 * ProxyConfigApi - axios parameter creator
 * @export
 */
export const ProxyConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
     * @summary Create Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigCreate} proxyConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProxyConfig: async (
      projId: string,
      envId: string,
      proxyConfigCreate: ProxyConfigCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createProxyConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('createProxyConfig', 'envId', envId);
      // verify required parameter 'proxyConfigCreate' is not null or undefined
      assertParamExists('createProxyConfig', 'proxyConfigCreate', proxyConfigCreate);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        proxyConfigCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes the proxy config and all its related data.
     * @summary Delete Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProxyConfig: async (
      projId: string,
      envId: string,
      proxyConfigId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteProxyConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteProxyConfig', 'envId', envId);
      // verify required parameter 'proxyConfigId' is not null or undefined
      assertParamExists('deleteProxyConfig', 'proxyConfigId', proxyConfigId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'proxy_config_id'}}`, encodeURIComponent(String(proxyConfigId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
     * @summary Get Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProxyConfig: async (
      projId: string,
      envId: string,
      proxyConfigId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getProxyConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getProxyConfig', 'envId', envId);
      // verify required parameter 'proxyConfigId' is not null or undefined
      assertParamExists('getProxyConfig', 'proxyConfigId', proxyConfigId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'proxy_config_id'}}`, encodeURIComponent(String(proxyConfigId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all the proxy configs defined within an environment.
     * @summary List Proxy Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProxyConfigs: async (
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listProxyConfigs', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listProxyConfigs', 'envId', envId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
     * @summary Update Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigUpdate} proxyConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProxyConfig: async (
      projId: string,
      envId: string,
      proxyConfigId: string,
      proxyConfigUpdate: ProxyConfigUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('updateProxyConfig', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('updateProxyConfig', 'envId', envId);
      // verify required parameter 'proxyConfigId' is not null or undefined
      assertParamExists('updateProxyConfig', 'proxyConfigId', proxyConfigId);
      // verify required parameter 'proxyConfigUpdate' is not null or undefined
      assertParamExists('updateProxyConfig', 'proxyConfigUpdate', proxyConfigUpdate);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'proxy_config_id'}}`, encodeURIComponent(String(proxyConfigId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        proxyConfigUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProxyConfigApi - functional programming interface
 * @export
 */
export const ProxyConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProxyConfigApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
     * @summary Create Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigCreate} proxyConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProxyConfig(
      projId: string,
      envId: string,
      proxyConfigCreate: ProxyConfigCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createProxyConfig(
        projId,
        envId,
        proxyConfigCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes the proxy config and all its related data.
     * @summary Delete Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProxyConfig(
      projId: string,
      envId: string,
      proxyConfigId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProxyConfig(
        projId,
        envId,
        proxyConfigId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
     * @summary Get Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProxyConfig(
      projId: string,
      envId: string,
      proxyConfigId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProxyConfig(
        projId,
        envId,
        proxyConfigId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all the proxy configs defined within an environment.
     * @summary List Proxy Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listProxyConfigs(
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProxyConfigRead>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listProxyConfigs(
        projId,
        envId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
     * @summary Update Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigUpdate} proxyConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProxyConfig(
      projId: string,
      envId: string,
      proxyConfigId: string,
      proxyConfigUpdate: ProxyConfigUpdate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProxyConfig(
        projId,
        envId,
        proxyConfigId,
        proxyConfigUpdate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ProxyConfigApi - factory interface
 * @export
 */
export const ProxyConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProxyConfigApiFp(configuration);
  return {
    /**
     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
     * @summary Create Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigCreate} proxyConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProxyConfig(
      projId: string,
      envId: string,
      proxyConfigCreate: ProxyConfigCreate,
      options?: any,
    ): AxiosPromise<ProxyConfigRead> {
      return localVarFp
        .createProxyConfig(projId, envId, proxyConfigCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes the proxy config and all its related data.
     * @summary Delete Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProxyConfig(
      projId: string,
      envId: string,
      proxyConfigId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteProxyConfig(projId, envId, proxyConfigId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
     * @summary Get Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProxyConfig(
      projId: string,
      envId: string,
      proxyConfigId: string,
      options?: any,
    ): AxiosPromise<ProxyConfigRead> {
      return localVarFp
        .getProxyConfig(projId, envId, proxyConfigId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all the proxy configs defined within an environment.
     * @summary List Proxy Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProxyConfigs(
      projId: string,
      envId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<ProxyConfigRead>> {
      return localVarFp
        .listProxyConfigs(projId, envId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
     * @summary Update Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigUpdate} proxyConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProxyConfig(
      projId: string,
      envId: string,
      proxyConfigId: string,
      proxyConfigUpdate: ProxyConfigUpdate,
      options?: any,
    ): AxiosPromise<ProxyConfigRead> {
      return localVarFp
        .updateProxyConfig(projId, envId, proxyConfigId, proxyConfigUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiCreateProxyConfigRequest
 */
export interface ProxyConfigApiCreateProxyConfigRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiCreateProxyConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiCreateProxyConfig
   */
  readonly envId: string;

  /**
   *
   * @type {ProxyConfigCreate}
   * @memberof ProxyConfigApiCreateProxyConfig
   */
  readonly proxyConfigCreate: ProxyConfigCreate;
}

/**
 * Request parameters for deleteProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiDeleteProxyConfigRequest
 */
export interface ProxyConfigApiDeleteProxyConfigRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiDeleteProxyConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiDeleteProxyConfig
   */
  readonly envId: string;

  /**
   * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiDeleteProxyConfig
   */
  readonly proxyConfigId: string;
}

/**
 * Request parameters for getProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiGetProxyConfigRequest
 */
export interface ProxyConfigApiGetProxyConfigRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiGetProxyConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiGetProxyConfig
   */
  readonly envId: string;

  /**
   * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiGetProxyConfig
   */
  readonly proxyConfigId: string;
}

/**
 * Request parameters for listProxyConfigs operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiListProxyConfigsRequest
 */
export interface ProxyConfigApiListProxyConfigsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiListProxyConfigs
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiListProxyConfigs
   */
  readonly envId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof ProxyConfigApiListProxyConfigs
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof ProxyConfigApiListProxyConfigs
   */
  readonly perPage?: number;
}

/**
 * Request parameters for updateProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiUpdateProxyConfigRequest
 */
export interface ProxyConfigApiUpdateProxyConfigRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiUpdateProxyConfig
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiUpdateProxyConfig
   */
  readonly envId: string;

  /**
   * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ProxyConfigApiUpdateProxyConfig
   */
  readonly proxyConfigId: string;

  /**
   *
   * @type {ProxyConfigUpdate}
   * @memberof ProxyConfigApiUpdateProxyConfig
   */
  readonly proxyConfigUpdate: ProxyConfigUpdate;
}

/**
 * ProxyConfigApi - object-oriented interface
 * @export
 * @class ProxyConfigApi
 * @extends {BaseAPI}
 */
export class ProxyConfigApi extends BaseAPI {
  /**
   * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
   * @summary Create Proxy Config
   * @param {ProxyConfigApiCreateProxyConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProxyConfigApi
   */
  public createProxyConfig(
    requestParameters: ProxyConfigApiCreateProxyConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ProxyConfigApiFp(this.configuration)
      .createProxyConfig(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.proxyConfigCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes the proxy config and all its related data.
   * @summary Delete Proxy Config
   * @param {ProxyConfigApiDeleteProxyConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProxyConfigApi
   */
  public deleteProxyConfig(
    requestParameters: ProxyConfigApiDeleteProxyConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ProxyConfigApiFp(this.configuration)
      .deleteProxyConfig(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.proxyConfigId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
   * @summary Get Proxy Config
   * @param {ProxyConfigApiGetProxyConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProxyConfigApi
   */
  public getProxyConfig(
    requestParameters: ProxyConfigApiGetProxyConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ProxyConfigApiFp(this.configuration)
      .getProxyConfig(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.proxyConfigId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all the proxy configs defined within an environment.
   * @summary List Proxy Configs
   * @param {ProxyConfigApiListProxyConfigsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProxyConfigApi
   */
  public listProxyConfigs(
    requestParameters: ProxyConfigApiListProxyConfigsRequest,
    options?: AxiosRequestConfig,
  ) {
    return ProxyConfigApiFp(this.configuration)
      .listProxyConfigs(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
   * @summary Update Proxy Config
   * @param {ProxyConfigApiUpdateProxyConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProxyConfigApi
   */
  public updateProxyConfig(
    requestParameters: ProxyConfigApiUpdateProxyConfigRequest,
    options?: AxiosRequestConfig,
  ) {
    return ProxyConfigApiFp(this.configuration)
      .updateProxyConfig(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.proxyConfigId,
        requestParameters.proxyConfigUpdate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
