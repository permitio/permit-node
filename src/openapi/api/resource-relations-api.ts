/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { RelationCreate } from '../types';
// @ts-ignore
import { RelationRead } from '../types';
/**
 * ResourceRelationsApi - axios parameter creator
 * @export
 */
export const ResourceRelationsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a resource relation to another resource
     * @summary Create Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {RelationCreate} relationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceRelation: async (
      projId: string,
      envId: string,
      resourceId: string,
      relationCreate: RelationCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('createResourceRelation', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('createResourceRelation', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('createResourceRelation', 'resourceId', resourceId);
      // verify required parameter 'relationCreate' is not null or undefined
      assertParamExists('createResourceRelation', 'relationCreate', relationCreate);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        relationCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a resource relation
     * @summary Delete Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceRelation: async (
      projId: string,
      envId: string,
      resourceId: string,
      relationId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('deleteResourceRelation', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('deleteResourceRelation', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('deleteResourceRelation', 'resourceId', resourceId);
      // verify required parameter 'relationId' is not null or undefined
      assertParamExists('deleteResourceRelation', 'relationId', relationId);
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'relation_id'}}`, encodeURIComponent(String(relationId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a resource relation
     * @summary Get Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceRelation: async (
      projId: string,
      envId: string,
      resourceId: string,
      relationId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('getResourceRelation', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('getResourceRelation', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('getResourceRelation', 'resourceId', resourceId);
      // verify required parameter 'relationId' is not null or undefined
      assertParamExists('getResourceRelation', 'relationId', relationId);
      const localVarPath =
        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}`
          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
          .replace(`{${'relation_id'}}`, encodeURIComponent(String(relationId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a resource relation to another resource
     * @summary List Resource Relations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceRelations: async (
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projId' is not null or undefined
      assertParamExists('listResourceRelations', 'projId', projId);
      // verify required parameter 'envId' is not null or undefined
      assertParamExists('listResourceRelations', 'envId', envId);
      // verify required parameter 'resourceId' is not null or undefined
      assertParamExists('listResourceRelations', 'resourceId', resourceId);
      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations`
        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResourceRelationsApi - functional programming interface
 * @export
 */
export const ResourceRelationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResourceRelationsApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a resource relation to another resource
     * @summary Create Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {RelationCreate} relationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createResourceRelation(
      projId: string,
      envId: string,
      resourceId: string,
      relationCreate: RelationCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceRelation(
        projId,
        envId,
        resourceId,
        relationCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes a resource relation
     * @summary Delete Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteResourceRelation(
      projId: string,
      envId: string,
      resourceId: string,
      relationId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceRelation(
        projId,
        envId,
        resourceId,
        relationId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get a resource relation
     * @summary Get Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getResourceRelation(
      projId: string,
      envId: string,
      resourceId: string,
      relationId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceRelation(
        projId,
        envId,
        resourceId,
        relationId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Creates a resource relation to another resource
     * @summary List Resource Relations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listResourceRelations(
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelationRead>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceRelations(
        projId,
        envId,
        resourceId,
        page,
        perPage,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ResourceRelationsApi - factory interface
 * @export
 */
export const ResourceRelationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ResourceRelationsApiFp(configuration);
  return {
    /**
     * Creates a resource relation to another resource
     * @summary Create Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {RelationCreate} relationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceRelation(
      projId: string,
      envId: string,
      resourceId: string,
      relationCreate: RelationCreate,
      options?: any,
    ): AxiosPromise<RelationRead> {
      return localVarFp
        .createResourceRelation(projId, envId, resourceId, relationCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a resource relation
     * @summary Delete Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceRelation(
      projId: string,
      envId: string,
      resourceId: string,
      relationId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteResourceRelation(projId, envId, resourceId, relationId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a resource relation
     * @summary Get Resource Relation
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceRelation(
      projId: string,
      envId: string,
      resourceId: string,
      relationId: string,
      options?: any,
    ): AxiosPromise<RelationRead> {
      return localVarFp
        .getResourceRelation(projId, envId, resourceId, relationId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a resource relation to another resource
     * @summary List Resource Relations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceRelations(
      projId: string,
      envId: string,
      resourceId: string,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<Array<RelationRead>> {
      return localVarFp
        .listResourceRelations(projId, envId, resourceId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createResourceRelation operation in ResourceRelationsApi.
 * @export
 * @interface ResourceRelationsApiCreateResourceRelationRequest
 */
export interface ResourceRelationsApiCreateResourceRelationRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiCreateResourceRelation
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiCreateResourceRelation
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiCreateResourceRelation
   */
  readonly resourceId: string;

  /**
   *
   * @type {RelationCreate}
   * @memberof ResourceRelationsApiCreateResourceRelation
   */
  readonly relationCreate: RelationCreate;
}

/**
 * Request parameters for deleteResourceRelation operation in ResourceRelationsApi.
 * @export
 * @interface ResourceRelationsApiDeleteResourceRelationRequest
 */
export interface ResourceRelationsApiDeleteResourceRelationRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiDeleteResourceRelation
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiDeleteResourceRelation
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiDeleteResourceRelation
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiDeleteResourceRelation
   */
  readonly relationId: string;
}

/**
 * Request parameters for getResourceRelation operation in ResourceRelationsApi.
 * @export
 * @interface ResourceRelationsApiGetResourceRelationRequest
 */
export interface ResourceRelationsApiGetResourceRelationRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiGetResourceRelation
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiGetResourceRelation
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiGetResourceRelation
   */
  readonly resourceId: string;

  /**
   * Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiGetResourceRelation
   */
  readonly relationId: string;
}

/**
 * Request parameters for listResourceRelations operation in ResourceRelationsApi.
 * @export
 * @interface ResourceRelationsApiListResourceRelationsRequest
 */
export interface ResourceRelationsApiListResourceRelationsRequest {
  /**
   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiListResourceRelations
   */
  readonly projId: string;

  /**
   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiListResourceRelations
   */
  readonly envId: string;

  /**
   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof ResourceRelationsApiListResourceRelations
   */
  readonly resourceId: string;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof ResourceRelationsApiListResourceRelations
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof ResourceRelationsApiListResourceRelations
   */
  readonly perPage?: number;
}

/**
 * ResourceRelationsApi - object-oriented interface
 * @export
 * @class ResourceRelationsApi
 * @extends {BaseAPI}
 */
export class ResourceRelationsApi extends BaseAPI {
  /**
   * Creates a resource relation to another resource
   * @summary Create Resource Relation
   * @param {ResourceRelationsApiCreateResourceRelationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceRelationsApi
   */
  public createResourceRelation(
    requestParameters: ResourceRelationsApiCreateResourceRelationRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceRelationsApiFp(this.configuration)
      .createResourceRelation(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.relationCreate,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes a resource relation
   * @summary Delete Resource Relation
   * @param {ResourceRelationsApiDeleteResourceRelationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceRelationsApi
   */
  public deleteResourceRelation(
    requestParameters: ResourceRelationsApiDeleteResourceRelationRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceRelationsApiFp(this.configuration)
      .deleteResourceRelation(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.relationId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a resource relation
   * @summary Get Resource Relation
   * @param {ResourceRelationsApiGetResourceRelationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceRelationsApi
   */
  public getResourceRelation(
    requestParameters: ResourceRelationsApiGetResourceRelationRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceRelationsApiFp(this.configuration)
      .getResourceRelation(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.relationId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a resource relation to another resource
   * @summary List Resource Relations
   * @param {ResourceRelationsApiListResourceRelationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourceRelationsApi
   */
  public listResourceRelations(
    requestParameters: ResourceRelationsApiListResourceRelationsRequest,
    options?: AxiosRequestConfig,
  ) {
    return ResourceRelationsApiFp(this.configuration)
      .listResourceRelations(
        requestParameters.projId,
        requestParameters.envId,
        requestParameters.resourceId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
